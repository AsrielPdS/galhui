"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.busy = exports.wait = exports.waiter = exports.ph = exports.barcb = exports.mbsep = exports.mbitem = exports.right = exports.menubar = exports.menusep = exports.submenu = exports.menuwait = exports.menucb = exports.menuitem = exports.menu = exports.fluid = exports.panel = exports.logo = exports.hr = exports.a = exports.img = exports.buttons = exports.confirm = exports.cancel = exports.close = exports.ilink = exports.negative = exports.positive = exports.ibutton = exports.ibt = exports.link = exports.bt = exports.icon = exports.hc = exports.cc = exports.doc = exports.body = exports.sentence = exports.word = exports.w = exports.$ = void 0;
const galho_1 = require("galho");
const util_js_1 = require("galho/util.js");
const util_js_2 = require("./util.js");
/**settings */
exports.$ = {
    // c: "_",
    delay: 500,
    rem: 14
};
/**words */
exports.w = {};
function word(key) { return key; }
exports.word = word;
function sentence(format) {
    const exp = /\{\w+\}/;
    format.replace(exp, (v) => exports.w[v.slice(1, v.length - 1)]);
}
exports.sentence = sentence;
exports.body = new galho_1.S(document.body);
exports.doc = new galho_1.S(document);
/**css class */
const cc = (...cls) => `._.${cls.join('-')}`;
exports.cc = cc;
/**html class */
const hc = (...cls) => ['_', cls.join('-')];
exports.hc = hc;
function icon(d, s) {
    if (d) {
        if ((0, util_js_1.isS)(d))
            d = { d };
        else if ((0, galho_1.isE)(d))
            return d.c((0, galho_1.cl)("c" /* icon */, s));
        return (0, galho_1.svg)('svg', {
            fill: d.c || "currentColor",
            viewBox: exports.$.is || "0 0 24 24",
        }, (0, galho_1.svg)('path', { d: d.d })).c((0, galho_1.cl)("c" /* icon */, s));
    }
}
exports.icon = icon;
const bt = (text, click, type = "button") => (0, galho_1.g)("button", "_ bt", text).p("type", type).on("click", click);
exports.bt = bt;
const link = (text, href) => (0, galho_1.g)("a", ["_", "lk" /* link */], text).p("href", href);
exports.link = link;
/** button with icon */
const ibt = (i, text, click, type = "button") => (0, galho_1.g)("button", "_ bt", [icon(i), text])
    .p("type", type)
    .c("c" /* icon */, !text).on("click", click);
exports.ibt = ibt;
/** @deprecated */
exports.ibutton = exports.ibt;
const positive = (i, text, click, type) => (0, exports.ibt)(i, text, click, type).c("_a" /* accept */);
exports.positive = positive;
const negative = (i, text, click, type) => (0, exports.ibt)(i, text, click, type).c("_e" /* error */);
exports.negative = negative;
/** link with icon */
const ilink = (i, text, href) => (0, galho_1.g)("a", "lk" /* link */, [icon(i), text]).p("href", href);
exports.ilink = ilink;
/**close button */
const close = (click) => (0, galho_1.div)((0, exports.hc)("cl" /* close */), icon(exports.$.i.close)).on("click", click);
exports.close = close;
/**cancel button */
const cancel = (click) => (0, exports.negative)(exports.$.i.cancel, exports.w.cancel, click);
exports.cancel = cancel;
/**confirm button */
const confirm = (click) => (0, exports.positive)(exports.$.i.check, exports.w.confirm, click, "submit");
exports.confirm = confirm;
const buttons = (...buttons) => (0, galho_1.div)("bs" /* buttons */, buttons);
exports.buttons = buttons;
const img = (src, cls) => (0, galho_1.g)("img", cls).p("src", src);
exports.img = img;
const a = (href, content, cls) => (0, galho_1.g)("a", cls, content).p("href", href);
exports.a = a;
const hr = (cls) => (0, galho_1.g)("hr", cls);
exports.hr = hr;
function logo(v) {
    if (v)
        if ((0, util_js_1.isS)(v)) {
            switch (v[0]) {
                case ".":
                case "/":
                    return (0, exports.img)(v).c("c" /* icon */);
                case "<":
                    return (0, galho_1.toSVG)(v).c("c" /* icon */);
            }
        }
        else
            return icon(v);
}
exports.logo = logo;
const panel = (hd, bd, ft) => (0, galho_1.div)("_ panel", [
    hd && (0, galho_1.wrap)(hd, "hd"),
    (0, galho_1.wrap)(bd, "bd"),
    ft && (0, galho_1.wrap)(ft, "ft")
]);
exports.panel = panel;
function fluid({ x, y, right: r, bottom: b }, menu, [o, side, main]) {
    /*m:main,s:side */
    let { innerHeight: wh, innerWidth: ww } = window, { width: mw, height: mh } = menu.rect(), h = o == "h", e = exports.$.rem * .4, [ws, wm, ms, mm, s0, m0, s1, m1] = h ? [wh, ww, mh, mw, y, x, b, r] : [ww, wh, mw, mh, x, y, r, b];
    main || (main = (m0 + (m1 - m0) / 2) > (wm / 2) ? "s" : "e");
    menu
        .css({
        ["max" + (h ? "Width" : "Height")]: (main == "e" ? wm - m1 : m0) - e * 2 + "px",
        [h ? "left" : "top"]: (main == "e" ? m1 + e : Math.max(0, m0 - mm) - e) + "px",
        [h ? "top" : "left"]: Math.max(0, Math.min(ws - ms, side == "s" ? s1 - ms : side == "e" ? s0 : s0 + (s1 - s0) / 2 - ms / 2)) + "px",
    });
}
exports.fluid = fluid;
function menu(items) { return (0, galho_1.div)("_ menu", (0, galho_1.g)("table", 0, items)); }
exports.menu = menu;
/**menu item */
const menuitem = (i, text, action, side) => (0, galho_1.g)("tr", "i" /* item */, [
    (0, galho_1.g)("td", 0, icon(i)),
    (0, galho_1.g)("td", 0, text),
    (0, galho_1.g)("td", "sd" /* side */, side),
    (0, galho_1.g)("td")
]).on("click", action);
exports.menuitem = menuitem;
/**checkbox */
function menucb(checked, text, toggle, id = (0, util_js_2.uuid)(4), disabled) {
    let input = (0, galho_1.g)("input", { id, checked, disabled, indeterminate: checked == null, type: "checkbox" });
    toggle && input.on("input", () => toggle.call(input, input.e.checked));
    return (0, galho_1.g)("tr", (0, galho_1.cl)("i", disabled && "ds" /* disabled */), [
        (0, galho_1.g)("td", 0, input.on("click", e => e.stopPropagation())),
        (0, galho_1.g)("td", 0, (0, galho_1.g)("label", 0, text).p("htmlFor", id)),
        (0, galho_1.g)("td"), (0, galho_1.g)("td")
    ]);
}
exports.menucb = menucb;
const menuwait = (callback) => (0, util_js_1.call)((0, galho_1.g)("tr", 0, (0, galho_1.g)("td", 0, wait(1 /* out */)).p("colSpan", 4)), tr => waiter(tr, callback));
exports.menuwait = menuwait;
const submenu = (i, text, items) => (0, util_js_1.call)((0, galho_1.g)("tr", "i", [
    (0, galho_1.g)("td", 0, icon(i)),
    (0, galho_1.g)("td", 0, text),
    (0, galho_1.g)("td"),
    (0, galho_1.g)("td", 0, icon("menuR"))
]), e => {
    let mn;
    e.on("click", () => {
        e.tcls("on" /* on */).is('.' + "on" /* on */) ?
            fluid(e.rect(), (mn || (mn = (0, galho_1.g)("table", "menu" /* menu */, items))).addTo(e), "h") :
            mn.remove();
    });
});
exports.submenu = submenu;
const menusep = () => (0, galho_1.g)("tr", "div" /* separator */);
exports.menusep = menusep;
/** */
const menubar = (...items) => (0, galho_1.div)("_ bar", items);
exports.menubar = menubar;
/** */
const right = () => (0, galho_1.div)("r" /* right */);
exports.right = right;
const mbitem = (i, text, action) => (0, galho_1.g)("button", "i", [icon(i), text]).on("click", action);
exports.mbitem = mbitem;
/**menubar separator */
const mbsep = () => (0, galho_1.g)("hr");
exports.mbsep = mbsep;
/**menubar checkbox */
function barcb(checked, text, toggle, disabled) {
    let input = (0, galho_1.g)("input", { checked, disabled, indeterminate: checked == null, type: "checkbox" });
    toggle && input.on("input", () => toggle.call(input, input.e.checked));
    return (0, galho_1.g)("label", (0, galho_1.cl)("i", disabled && "ds" /* disabled */), [input, text]);
}
exports.barcb = barcb;
/**place holder */
function ph(type = 1 /* out */) {
    switch (type) {
        case 0 /* inline */:
        case 1 /* out */:
            return (0, galho_1.div)("ld" /* loading */, [
            //icon({ /*s: size, */d: `loading ${C.centered}` }),
            //icon({ /*s: size, */d: `loading ${C.itemA} ${C.centered}` }),
            ]);
    }
}
exports.ph = ph;
function waiter(element, cb) {
    cb && ((0, util_js_1.isP)(cb) ? cb : cb?.()).then(t => {
        if (t instanceof galho_1.S) {
            t.c(Array.from(element.e.classList).slice(1));
            t.attr("style", (t.attr("style") || "") +
                (element.attr("style") || ""));
        }
        element.replace(t);
    });
}
exports.waiter = waiter;
function wait(type, body) {
    if (!(0, util_js_1.isN)(type)) {
        body = type;
        type = 0 /* inline */;
    }
    let loader = ph(type);
    waiter(loader, body);
    return loader;
}
exports.wait = wait;
function busy(container) {
    let e = wait(), t = setTimeout(() => {
        container.add(e);
    }, 750);
    return () => {
        e.remove();
        clearTimeout(t);
    };
}
exports.busy = busy;
//# sourceMappingURL=data:application/json;base64,