import { cl, div, g, isE, S, svg, toSVG } from "galho";
import { call, isA, isN, isP, isS } from "galho/util.js";
import { uuid } from "./util.js";
/**settings */
export const $ = {
    // c: "_",
    delay: 500,
    rem: 14
};
/**words */
export const w = {};
export function word(key) { return key; }
export function sentence(format) {
    const exp = /\{\w+\}/;
    format.replace(exp, (v) => w[v.slice(1, v.length - 1)]);
}
export const body = new S(document.body);
export const doc = new S(document);
/**css class */
export const cc = (...cls) => `._.${cls.join('-')}`;
/**html class */
export const hc = (...cls) => ['_', cls.join('-')];
export function icon(d, s) {
    if (d) {
        if (isS(d))
            d = { d };
        else if (isE(d))
            return d.c(cl("icon", s));
        return svg('svg', {
            fill: d.c || "currentColor",
            viewBox: $.is || "0 0 24 24",
        }, svg('path', { d: d.d })).c(cl("icon", s));
    }
}
export const label = (v, cls) => v && ((isS(v) ? div(0, v) : isA(v) ? div(0, [icon(v[0]), v[1]]) : g(v)))?.c(cls);
export const bt = (text, click, type = "button") => g("button", "_ bt", text).p("type", type).on("click", click);
export const link = (text, href) => g("a", ["_", "lk" /* C.link */], text).p("href", href);
/** button with icon */
export const ibt = (i, text, click, type = "button") => g("button", "_ bt", [icon(i), text])
    .p("type", type)
    .c("icon" /* C.icon */, !text).on("click", click);
/** @deprecated */
export const ibutton = ibt;
export const positive = (i, text, click, type) => ibt(i, text, click, type).c("_a" /* Color.accept */);
export const negative = (i, text, click, type) => ibt(i, text, click, type).c("_e" /* Color.error */);
/** link with icon */
export const ilink = (i, text, href) => g("a", "lk" /* C.link */, [icon(i), text]).p("href", href);
/**close button */
export const close = (click) => div(hc("cl" /* C.close */), icon($.i.close)).on("click", click);
/**cancel button */
export const cancel = (click) => negative($.i.cancel, w.cancel, click);
/**confirm button */
export const confirm = (click) => positive(null, w.confirm, click, "submit");
export const buttons = (...buttons) => div("bs" /* C.buttons */, buttons);
export const img = (src, cls) => g("img", cls).p("src", src);
export const a = (href, content, cls) => g("a", cls, content).p("href", href);
export const hr = (cls) => g("hr", cls);
export function logo(v) {
    if (v)
        if (isS(v)) {
            switch (v[0]) {
                case ".":
                case "/":
                    return img(v).c("icon" /* C.icon */);
                case "<":
                    return toSVG(v).c("icon" /* C.icon */);
            }
        }
        else
            return icon(v);
}
export function fluid({ x, y, right: r, bottom: b }, menu, [o, side, main]) {
    /*m:main,s:side */
    let { innerHeight: wh, innerWidth: ww } = window, { width: mw, height: mh } = menu.rect, h = o == "h", e = $.rem * .4, [ws, wm, ms, mm, s0, m0, s1, m1] = h ? [wh, ww, mh, mw, y, x, b, r] : [ww, wh, mw, mh, x, y, r, b];
    main ||= (m0 + (m1 - m0) / 2) > (wm / 2) ? "s" : "e";
    menu
        .css({
        ["max" + (h ? "Width" : "Height")]: (main == "e" ? wm - m1 : m0) - e * 2 + "px",
        [h ? "left" : "top"]: (main == "e" ? m1 + e : Math.max(0, m0 - mm) - e) + "px",
        [h ? "top" : "left"]: Math.max(0, Math.min(ws - ms, side == "s" ? s1 - ms : side == "e" ? s0 : s0 + (s1 - s0) / 2 - ms / 2)) + "px",
    });
}
export function menu(items) { return div("_ menu", g("table", 0, items)); }
/**menu item */
export const menuitem = (i, text, action, side, disabled) => g("tr", "i" + (disabled ? " " + "ds" /* C.disabled */ : ""), [
    g("td", 0, icon(i)),
    g("td", 0, text),
    g("td", "sd" /* C.side */, side),
    g("td")
]).on("click", !disabled && action);
/**checkbox */
export function menucb(checked, text, toggle, id = uuid(4), disabled) {
    let input = g("input", { id, checked, disabled, indeterminate: checked == null, type: "checkbox" });
    toggle && input.on("input", () => toggle.call(input, input.e.checked));
    return g("tr", ["i", disabled && "ds" /* C.disabled */], [
        g("td", 0, input.on("click", e => e.stopPropagation())),
        g("td", 0, g("label", 0, text).p("htmlFor", id)),
        g("td"), g("td")
    ]);
}
export const menuwait = (callback) => call(g("tr", 0, g("td", 0, wait(1 /* WaitType.out */)).p("colSpan", 4)), tr => waiter(tr, callback));
export const submenu = (i, text, items) => call(g("tr", "i", [
    g("td", 0, icon(i)),
    g("td", 0, text),
    g("td"),
    g("td", 0, icon("menuR"))
]), e => {
    let mn;
    e.on("click", () => {
        e.tcls("on" /* C.on */).is('.' + "on" /* C.on */) ?
            fluid(e.rect, (mn ||= g("table", "menu" /* C.menu */, items)).addTo(e), "h") :
            mn.remove();
    });
});
export const menusep = () => g("tr", "_ hr");
/** */
export const menubar = (...items) => div("_ bar", items);
/** */
export const right = () => div("r" /* HAlign.right */);
export const mbitem = (i, text, action) => g("button", "i", [icon(i), text]).on("click", action);
/**menubar separator */
export const mbsep = () => g("hr");
/**menubar checkbox */
export function barcb(checked, text, toggle, disabled) {
    let input = g("input", { checked, disabled, indeterminate: checked == null, type: "checkbox" });
    toggle && input.on("input", () => toggle.call(input, input.e.checked));
    return g("label", ["i", disabled && "ds" /* C.disabled */], [input, text]);
}
/**place holder */
export function ph(type = 1 /* WaitType.out */) {
    switch (type) {
        case 0 /* WaitType.inline */:
        case 1 /* WaitType.out */:
            return div("ld" /* C.loading */, [
            //icon({ /*s: size, */d: `loading ${C.centered}` }),
            //icon({ /*s: size, */d: `loading ${C.itemA} ${C.centered}` }),
            ]);
    }
}
export function waiter(element, cb) {
    cb && (isP(cb) ? cb : cb?.()).then(t => {
        if (t instanceof S) {
            t.c(Array.from(element.e.classList).slice(1));
            t.attr("style", (t.attr("style") || "") +
                (element.attr("style") || ""));
        }
        element.replace(t);
    });
}
export function wait(type, body) {
    if (!isN(type)) {
        body = type;
        type = 0 /* WaitType.inline */;
    }
    let loader = ph(type);
    waiter(loader, body);
    return loader;
}
//todo: colocar no galhui
export const loading = (sz = "n" /* Size.n */) => div("_ blank", div("_ load " + sz));
export async function busy(container, cb, sz, time = 750) {
    let e = loading(sz), p;
    let t = setTimeout(() => {
        p = container.add(e).css("position");
        container.css({ position: "relative" });
    }, time);
    let close = () => {
        e.remove();
        clearTimeout(t);
        container?.css({ position: p });
    };
    try {
        await cb(close);
    }
    finally {
        close();
    }
}
export const blobToBase64 = (v) => new Promise((rs, rj) => {
    var reader = new FileReader();
    reader.readAsDataURL(v);
    reader.onloadend = () => rs(reader.result);
    reader.onerror = rj;
});
//# sourceMappingURL=data:application/json;base64,