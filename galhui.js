"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.panel = exports.ctx = exports.popup = exports.fixed = exports.fluid = exports.logo = exports.hr = exports.a = exports.img = exports.dropdown = exports.menu = exports.buttons = exports.confirm = exports.cancel = exports.close = exports.ilink = exports.negative = exports.positive = exports.ibutton = exports.link = exports.button = exports.icon = exports.hc = exports.cc = exports.doc = exports.body = exports.sentence = exports.word = exports.w = exports.$ = void 0;
const galho_1 = require("galho");
const s_1 = require("galho/s");
const inutil_1 = require("inutil");
/**settings */
exports.$ = {
    // c: "_",
    iconS: 24,
    delay: 500,
    rem: 14
};
/**words */
exports.w = {};
function word(key) { return key; }
exports.word = word;
function sentence(format) {
    const exp = /\{\w+\}/;
    format.replace(exp, (v) => exports.w[v.slice(1, v.length - 1)]);
}
exports.sentence = sentence;
exports.body = new galho_1.S(document.body);
exports.doc = new galho_1.S(document);
/**css class */
const cc = (...cls) => `._.${cls.join('-')}`;
exports.cc = cc;
/**html class */
const hc = (...cls) => ['_', cls.join('-')];
exports.hc = hc;
function icon(d, s) {
    if (d) {
        if ((0, inutil_1.isS)(d))
            d = { d };
        else if ((0, s_1.isSelection)(d))
            return d.cls((0, galho_1.cl)("c" /* icon */, s));
        return (0, galho_1.svg)('svg', {
            fill: d.c || "currentColor",
            viewBox: `0 0 ${exports.$.iconS} ${exports.$.iconS}`,
        }, (0, galho_1.svg)('path', { d: d.d })).cls((0, galho_1.cl)("c" /* icon */, s));
    }
}
exports.icon = icon;
const button = (text, click, type = "button") => (0, galho_1.g)("button", (0, exports.hc)("bt" /* button */), text).prop("type", type).on("click", click);
exports.button = button;
const link = (text, href) => (0, galho_1.g)("a", "bt" /* button */, text).prop("href", href);
exports.link = link;
/** button with icon */
const ibutton = (i, text, click, type = "button") => (0, galho_1.g)("button", (0, exports.hc)("bt" /* button */), [icon(i), text])
    .prop("type", type)
    .cls("c" /* icon */, !text).on("click", click);
exports.ibutton = ibutton;
const positive = (i, text, click, type) => (0, exports.ibutton)(i, text, click, type).cls("_a" /* accept */);
exports.positive = positive;
const negative = (i, text, click, type) => (0, exports.ibutton)(i, text, click, type).cls("_e" /* error */);
exports.negative = negative;
/** link with icon */
const ilink = (i, text, href) => (0, galho_1.g)("a", "lk" /* link */, [icon(i), text]).prop("href", href);
exports.ilink = ilink;
/**close button */
const close = (click) => (0, galho_1.div)((0, exports.hc)("cl" /* close */), icon(exports.$.i.close)).on("click", click);
exports.close = close;
/**cancel button */
const cancel = (click) => (0, exports.negative)(exports.$.i.cancel, exports.w.cancel, click);
exports.cancel = cancel;
/**confirm button */
const confirm = (click) => (0, exports.positive)("confirm", exports.w.confirm, click, "submit");
exports.confirm = confirm;
const buttons = (...buttons) => (0, galho_1.div)("bs" /* buttons */, buttons);
exports.buttons = buttons;
function menu(items) { return (0, galho_1.div)((0, exports.hc)("menu" /* menu */), (0, galho_1.g)("table", 0, items)); }
exports.menu = menu;
function dropdown(label, items) {
    return (0, inutil_1.call)((0, galho_1.div)((0, exports.hc)("dd" /* dropdown */), label), e => {
        let mn = items instanceof galho_1.S ? items : null, open;
        e.on("click", () => {
            if (open)
                mn.remove();
            else {
                (mn ||= menu(items)).addTo(e);
                requestAnimationFrame(function _() {
                    fluid(e, mn);
                    if (exports.body.contains(mn))
                        requestAnimationFrame(_);
                });
            }
            open = !open;
        });
    });
}
exports.dropdown = dropdown;
const img = (src, cls) => (0, galho_1.g)("img", cls).prop("src", src);
exports.img = img;
const a = (href, content, cls) => (0, galho_1.g)("a", cls, content).prop("href", href);
exports.a = a;
const hr = (cls) => (0, galho_1.g)("hr", cls);
exports.hr = hr;
function logo(v) {
    if (v)
        if ((0, inutil_1.isS)(v)) {
            switch (v[0]) {
                case ".":
                case "/":
                    return (0, exports.img)(v).cls("c" /* icon */);
                case "<":
                    return (0, galho_1.toSVG)(v).cls("c" /* icon */);
            }
        }
        else
            return icon(v);
}
exports.logo = logo;
/**dropdown with width>=base.width  */
function fluid(base, menu, sub, vAlign, hAlign) {
    let rct = (0, s_1.rect)(base), wh = window.innerHeight, ww = window.innerWidth;
    if (!vAlign)
        vAlign = (rct.top + rct.height / 2) > (wh / 2) ? "t" /* top */ : "b" /* bottom */;
    if (!hAlign)
        hAlign = (rct.left + rct.width / 2) > (ww / 2) ? "l" /* left */ : "r" /* right */;
    menu.css('minWidth', rct.width + 'px');
    if (vAlign == "t" /* top */) {
        menu
            .uncss(['top'])
            .css({
            bottom: (wh - (sub ? rct.bottom : rct.top)) + 'px',
            maxHeight: (sub ? rct.bottom : rct.top) + 'px'
        })
            .cls("b" /* bottom */, false);
    }
    else {
        menu
            .uncss(['bottom'])
            .css({
            top: (sub ? rct.top : rct.bottom) + 'px',
            maxHeight: (wh - (sub ? rct.top : rct.bottom)) + 'px'
        })
            .cls("t" /* top */, false);
    }
    if (hAlign == "l" /* left */) {
        menu
            .uncss(['left'])
            .css('right', (ww - (sub ? rct.left : rct.right)) + 'px')
            .cls("r" /* right */, false);
    }
    else {
        menu
            .uncss(['right'])
            .css('left', (sub ? rct.right : rct.left) + 'px')
            .cls("l" /* left */, false);
    }
    menu.cls([vAlign, hAlign]);
}
exports.fluid = fluid;
/**dropdown with width=base.width  */
function fixed(base, menu, align) {
    let rct = (0, s_1.rect)(base), 
    // h = menu.e.clientHeight,
    wh = window.innerHeight;
    if (wh / 2 - rct.top > 0) {
        base.cls("t" /* top */, false).cls("b" /* bottom */);
        menu.css({
            left: rct.left + 'px',
            top: rct.bottom + 'px',
            maxHeight: (wh - rct.bottom) + 'px'
        }).uncss(['bottom']);
    }
    else {
        base.cls("b" /* bottom */, false).cls("t" /* top */);
        menu.css({
            left: rct.left + 'px',
            bottom: (wh - rct.top) + 'px',
            maxHeight: rct.top + 'px'
        }).uncss(['top']);
    }
    menu.css('width', rct.width + 'px');
}
exports.fixed = fixed;
function popup(div, opts) {
    let last = (0, galho_1.active)(), ctx = div.css({
        left: opts.clientX + 'px',
        top: opts.clientY + 'px'
    }).prop("tabIndex", 0), 
    // isOut: bool,
    wheelHandler = (e) => (0, galho_1.clearEvent)(e);
    ctx.queryAll('button').on('click', function () { last.valid ? last.focus() : this.blur(); });
    ctx.on({
        focusout: (e) => (0, s_1.contains)(ctx, e.relatedTarget) || (ctx.remove() && exports.body.off("wheel", wheelHandler)),
        keydown(e) {
            if (e.key == "Escape") {
                e.stopPropagation();
                ctx.blur();
            }
        }
    }).addTo(exports.body).focus();
    exports.body.on("wheel", wheelHandler, { passive: false });
}
exports.popup = popup;
/**context menu */
async function ctx(e, data) {
    (0, galho_1.clearEvent)(e);
    popup(menu(data), e);
}
exports.ctx = ctx;
const panel = (hd, bd, ft) => (0, galho_1.div)("_ panel", [
    hd && (0, galho_1.wrap)(hd, "hd"),
    (0, galho_1.wrap)(bd, "bd"),
    ft && (0, galho_1.wrap)(ft, "ft")
]);
exports.panel = panel;
//# sourceMappingURL=data:application/json;base64,