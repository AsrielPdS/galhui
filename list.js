"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tab = exports.list = exports.kbHandler = exports.kbHTp = exports.crudHandler = exports.defRenderer = void 0;
const galho_1 = require("galho");
const inutil_1 = require("inutil");
const orray_1 = require("orray");
const selector_1 = require("orray/selector");
const galhui_1 = require("./galhui");
exports.defRenderer = {
    null: () => (0, galho_1.div)(0, galhui_1.$.null),
    invalidIcon: () => (0, galhui_1.icon)('image-broken'),
    checkboxFmt: "icon",
    html: true,
    interactive: true,
    format: true,
    dateFmt: "d",
    timeFmt: "t",
    numberFmt: "0,0.00"
};
function crudHandler(p, dt, cls, i) {
    let focus = ({ currentTarget: ct, target: t, ctrlKey: ctrl, shiftKey: shift }) => {
        if (ct == t)
            (0, selector_1.clear)(dt, "on");
        else
            (0, selector_1.add)(dt, "on", (0, galho_1.g)(t).closest('.' + cls).d(), (0, selector_1.tp)(ctrl, shift));
    };
    return p.on({
        click: focus,
        dblclick: i.open && (() => i.open(...(0, selector_1.list)(dt, "on"))),
        contextmenu: i.menu && ((e) => {
            focus(e);
            let t = i.menu(...(0, selector_1.list)(dt, "on"));
            if (t)
                (0, galhui_1.ctx)(e, t);
        })
    });
}
exports.crudHandler = crudHandler;
const kbHTp = (dt, dist, { ctrlKey: ctrl, shiftKey: shift }) => shift ? (0, selector_1.move)(dt, "on", dist, (0, selector_1.tp)(ctrl, false)) :
    ctrl ? (0, selector_1.movePivot)(dt, "on", dist) :
        (0, selector_1.move)(dt, "on", dist, 0 /* set */);
exports.kbHTp = kbHTp;
function kbHandler(dt, e, i) {
    switch (e.key) {
        case "Delete":
            let t = (0, selector_1.list)(dt, "on");
            if (t.length && i.remove) {
                (async () => {
                    if ((await i.remove(...t)) !== false)
                        for (let i of t)
                            (0, orray_1.remove)(dt, i);
                })();
            }
            else
                return;
            break;
        case "Home":
            (0, exports.kbHTp)(dt, -(0, selector_1.pivot)(dt, "on"), e);
            break;
        case "End":
            (0, exports.kbHTp)(dt, dt.length - (0, selector_1.pivot)(dt, "on"), e);
            break;
        case "PageDown":
            (0, exports.kbHTp)(dt, 10, e);
            break;
        case "PageUp":
            (0, exports.kbHTp)(dt, -10, e);
            break;
        case "Enter":
            if (i.open) {
                i.open(...(0, selector_1.list)(dt, "on"));
                break;
            }
            else
                return;
        default:
            return;
    }
    return true;
}
exports.kbHandler = kbHandler;
function list(i, data) {
    let dt = (0, orray_1.extend)(data, {
        g: i.single ? null : ["on"],
        clear: true, key: i.key
    }), opts = i.options, e = (0, inutil_1.t)(i.enumarate);
    return (0, orray_1.bind)(dt, crudHandler((0, galho_1.g)("ol", "_ list"), dt, "i", i), {
        insert(value, index) {
            let item = (0, galho_1.div)("i", [
                (0, galho_1.div)(["sd" /* side */], e ? index + 1 : ' ').css('flexBasis', `${galhui_1.$.rem * 2.5}px`),
                (0, galho_1.wrap)(i.item(value)).cls(["bd" /* body */]),
                opts && (0, galho_1.div)(["extra" /* extra */], opts.map((fn) => fn && fn(value, index)))
                    .on('dblclick', (e) => { e.stopPropagation(); })
            ]).d(value);
            return item;
        },
        tag(s, active) {
            s.cls("crt" /* current */, active).e.scrollIntoView({
                block: "nearest",
                inline: "nearest"
            });
            if (i.single)
                s.cls("on", active);
        },
        groups(s, on, _, key) {
            s.cls(key, on);
        }
    });
}
exports.list = list;
const tab = (items, removeble, empty) => (0, galho_1.div)(["ta" /* tab */], [
    (0, orray_1.bind)(items, (0, galho_1.div)(["bar" /* menubar */]), {
        tag: (v, a) => v.cls("on" /* on */, a),
        insert: value => (0, galho_1.div)("i" /* item */, [
            (0, galhui_1.icon)(value.icon),
            value.text,
            removeble && (0, galhui_1.close)(e => { (0, galho_1.clearEvent)(e); (0, orray_1.remove)(items, value); })
        ]).on('click', () => (0, orray_1.setTag)(items, "on", value))
    }),
    (0, inutil_1.call)((0, galho_1.div)("bd" /* body */), bd => {
        let cb = (v) => {
            bd.attr("id", false).uncls();
            if (v) {
                bd.set((0, inutil_1.isF)(v.body) ? (v.body = v.body(v)) : v.body);
                v.focus?.(bd, true);
            }
            else
                bd.set(empty?.());
        };
        (0, orray_1.ontag)(items, "on" /* on */, cb);
        cb((0, orray_1.getTag)(items, "on" /* on */)?.value);
    }),
]);
exports.tab = tab;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQXlEO0FBQ3pELG1DQUFzQztBQUN0QyxpQ0FBdUU7QUFDdkUsNkNBQWlNO0FBQ2pNLHFDQUErRDtBQWlEbEQsUUFBQSxXQUFXLEdBQWtCO0lBQ3hDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFBLFdBQUcsRUFBQyxDQUFDLEVBQUUsVUFBQyxDQUFDLElBQUksQ0FBQztJQUMxQixXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBQSxhQUFJLEVBQUMsY0FBYyxDQUFDO0lBQ3ZDLFdBQVcsRUFBRSxNQUFNO0lBQ25CLElBQUksRUFBRSxJQUFJO0lBQ1YsV0FBVyxFQUFFLElBQUk7SUFDakIsTUFBTSxFQUFFLElBQUk7SUFDWixPQUFPLEVBQUUsR0FBRztJQUNaLE9BQU8sRUFBRSxHQUFHO0lBQ1osU0FBUyxFQUFFLFFBQVE7Q0FDcEIsQ0FBQTtBQUlELFNBQWdCLFdBQVcsQ0FBSSxDQUFJLEVBQUUsRUFBUSxFQUFFLEdBQVEsRUFBRSxDQUFXO0lBQ2xFLElBQ0UsS0FBSyxHQUFHLENBQUMsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFjLEVBQUUsRUFBRTtRQUN2RixJQUFJLEVBQUUsSUFBSSxDQUFDO1lBQ1QsSUFBQSxnQkFBYyxFQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQzs7WUFDdEIsSUFBQSxjQUFZLEVBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFBLFNBQUMsRUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLElBQUEsYUFBYSxFQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2hHLENBQUMsQ0FBQztJ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